---
layout: post
title: 回顾过去
date: 2018-02-23 14:00:00 +0800
description: 回顾过去. # Add post description (optional)
img: 20180223/20180228-1.jpg # Add image post (optional)
tags: [随笔] # add tag
---

这一周是狗年后上班的第一周，整个人还在调整状态中，加之有些感冒发烧，工作几天下来如同梦游。

今年是我做开发的第三年了，从一个什么都不懂的小白开始接触iOS开发，到前端开发，再到现在的半全栈开发。两年iOS开发、1年半大前端开发，经历了3个商业项目，一个7个月，两个一年半。从中还是学到了很多东西，开发也变得得心应手了。特别是第二个iOS项目，前前后后经历过2次大的调整，基本每次调整都等于重构。从第一个版本的以家庭圈为主的健康数据管理，到第二个版本的以存储健康档案为主的档案管理，再到后来的以私人健康教练的主的健康养成。三个不同的阶段，相当于做了三个不同的APP。

这里我想先回顾一下iOS开发。从无到有，也接触了很多东西，如UI搭建方式的选型，考虑是用纯代码、storyboard还是xib，最后选用纯代码写UI也是考虑到后期维护和可扩展性大。还有iOS端数据的存储设计，是选用CoreData还是sqlite3或是FMDB，虽说都是基于sqlite，sqlite3直接排除，原因就是操作复杂。最后还是选择了FMDB做本地数据的操作，其实当时选这个主要就是为了更熟悉sql语句。项目中遇到的最大的UI的问题还是绘制动态折线图，还要在折线部分绘制阴影，也就是这样

![截图1]({{site.baseurl}}/assets/img/20180228/20180228-2.jpg)

当时的第一反应就是找个能画折线图的开源库，再随便填几个数据就ok了，结果当时找了很久也没有满足需求的。求人不如求己，那就自己写吧。静下心来思考，其实也不难，也就是先用QuartzCore或UIBezierPath画出图表基准线。再根据数据绘制N个点，然后再按点的位置画一条折线出来，绘制简单的折线也就是这个思路。下面的阴影则是根据折线路径画的多边形，再用阴影填充就达到效果了。


除了本地化存储、UI的一些体会，还有最重要的就是性能优化。iOS端的性能优化可以做的东西可以有很多很多，而我也只是解决了很少的东西，虽然不多，但经验总是宝贵的。就拿一些典型的性能优化来说
- 对于部分页面需要请求大量数据的，利用iOS的生命周期，在`viewWillAppear`中加载UI，在`viewDidAppear`中加载数据。还有和后台协商，将某些API合并成一个API，尽量减少数据的请求
- 对`delegate`、`block`用`weak`修饰，避免引起循环引用

> 这里提到循环引用，就想扯句题外话，谈谈关于block为什么会造成循环引用。block本质上就是一个函数指针，即所指向的代码块的内存地址。block用于传值，实际就是把block的地址传到要调用block的地方。如果当前控制器引用了block，而block又去引用当前的控制器self，就会造成循环引用。而如果block没有直接或间接被self存储，就不会产生循环引用

继续谈性能优化

- 所有的图片预先只加载小图，需要预览时再加载大图，并将图片下载放到后台线程处理
- 本地缓存图片，获取图片先查看本地缓存，没有再获取
- 关于tableView，对于每行高度不同的cell，要先对每行的高度进行计算，当加载cell时，只需去拿到cell高度并渲染
- 在tableView中会遇到很多需要加载图片的地方，我采取的方案是当tableView滚动时，不加载图片，当tableView停止滑动时，再reloadData。这样在用户滑动时，滑动的流畅度提高，不会出现大量卡顿的情况
- 还有 一定要用真机测试，一定要用真机测试，一定要用真机测试，重要的事情说三遍。手机的性能和Mac完全不在一个级别上，模拟器测试的好好的，一到iPhone上就掉帧厉害。所以有关性能的测试一定要放到手机上

在项目中还有很多地方可以优化，稍加注意，对性能的提升都会有很大的帮助。对于程序员来说，每个地方都是不得不要去解决的，解决了问题，心里的成就感也油然而生。

回顾了一些关于iOS开发的感想，那么就要说说为什么我又会走上前端开发的道路。

将时间回溯到2016年中旬，当时必顾健康正在做推广，有很多活动页面需要经常做修改。Android还好，但是iOS呢，上架一次就要花费好几天，如果没通过，又是好几天。所以摆在我们眼前很现实的问题，就是如何满足那些快速发展和多变的需求，Hybrid开发就此走进了我们的视野。当时对比了好几个框架，最后选择了`Cordova`作为混合开发的基础。原因就是iOS端和Android端都支持，其二就是可以直接引入到现有的项目中。

Hybrid开发需要前端的支持，而当时公司的前端主要忙着开发产品的活动页面。So，我们只有前端、native一起搞。在接下来的半个月，我们主要了解h5、native交互原理，然后开始定制化开发插件。根据需求，开发定制插件，前端js只需调用这些接口，就能和native进行交互。根据这一套插件，然后我们把重心放到web开发中，实现一套代码两短可用，很大程度上提升了开发效率。不过中间还是遇到很多坑，比如经常会遇到在iOS端没问题，在Android端就会产生bug，并且当时Android对web的支持也没有iOS做的好，调试起来很麻烦。不过后来还是在团队的努力下，慢慢趋于稳定。解决了hybrid开发的问题，那么就要面对最主要的问题了，如何应对多变的需求。我们采取的方法是
1. 将web代码放到本地，同时也提升了webView的流畅度
2. 有一个log文件记录每个每个web文件的hash值
3. 在后台放一套web代码，当后台web代码发生改变，客户端会匹配hash值并下载新的代码更新到本地
4. 被改变的页面打开后，读取新的代码，页面改变

就此，我们也解决了客户端热更新的问题。但是因为这次经历，我对前端开发产生了兴趣，也为我之后走上前端开发埋下了伏笔。这次经历后，我发现hybrid开发效率确实很高，所以为了提升我的技术栈，我开始学习前端知识。俗话说“闭门造车,出门合辙”，学了前端不做项目肯定不行。在和公司领导沟通好，我开始转岗到了前端开发。

作为前端开发的我，第一个项目就是现在公司主要的产品——必顾养老管家。一套用于养老院管理的SaaS平台，项目基于Vue.js开发单页面程序。采用工程化、模块化、组件化开发项目，这种模式能有效降低代码耦合度，不仅提高了开发效率，也降低维护难度。最让我体会深刻的就是vue的MVVM架构，数据双向绑定，简化DOM的操作，将任务着重放到业务开发中。在开发后期也证明了，管理系统有大量的数据操作，非常适合SPA开发。同时，使用webpack配置并打包项目，用Jenkins+git实现项目的持续集成和自动化部署，在测试环境中也省去了大量的打包部署时间，为此，我也开始基础和学习Linux的知识。

后来由于需求的增加，之前的架构已经不足以支持目前的开发了，在经历了一番讨论后。我们决定将之前的所有都推翻，采用ruby on rails开发服务系统。ruby on rails 给我的第一感觉就是开发效率高，非常的高。一句命令生成model、view、controller，资源的增删改查都已经生成好。不过ruby on rails开发本质还是web2.0的那一套，与现在大行其道的前后端分离扯不上边。不过各有各的好，用什么技术都可以，最重要的是实现需求。

至此，我才算真正意义上走上了程序员的道路。
